{"ast":null,"code":"import { takeLatest, put, all, call, takeLeading } from 'redux-saga/effects';\nimport userActionTypes from './user.types';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure, singUpStart } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail(_ref) {\n  let {\n    payload: {\n      email,\n      password\n    }\n  } = _ref;\n\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* signUp(_ref2) {\n  let {\n    payload: {\n      email,\n      password,\n      displayName\n    }\n  } = _ref2;\n\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp(_ref3) {\n  let {\n    payload: {\n      user,\n      additionalData\n    }\n  } = _ref3;\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(userActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(userActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(userActionTypes.SIGN_UP_START, signUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["C:/Users/Rohan/Desktop/Rohan-React/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","takeLeading","userActionTypes","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","singUpStart","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","signUp","displayName","createUserWithEmailAndPassword","signInAfterSignUp","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpSuccess","SIGN_UP_SUCCESS","onSignUpStart","SIGN_UP_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call, takeLeading } from 'redux-saga/effects';\r\n\r\nimport userActionTypes from './user.types';\r\n\r\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure, singUpStart } from './user.actions';\r\n\r\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\r\n    try {\r\n        const userRef = yield call(createUserProfileDocument,userAuth, additionalData);\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }))\r\n    } catch(error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n \r\nexport function* signInWithGoogle() {\r\n    try {\r\n        const {user} = yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFromUserAuth(user)\r\n    } catch(error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* signInWithEmail({payload: { email, password }}) {\r\n    try {\r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n        yield getSnapshotFromUserAuth(user)\r\n    } catch(error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* isUserAuthenticated() {\r\n    try {\r\n        const userAuth = yield getCurrentUser();\r\n        if(!userAuth) return;\r\n        yield getSnapshotFromUserAuth(userAuth);\r\n    } catch(error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* signOut() {\r\n    try {\r\n        yield auth.signOut();\r\n        yield put (signOutSuccess())\r\n    } catch(error) {\r\n        yield put(signOutFailure(error))\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\r\n}\r\n\r\nexport function* signUp({ payload : { email, password, displayName } }) {\r\n    try {\r\n        const { user } = yield auth.createUserWithEmailAndPassword(email, password);\r\n        yield put(signUpSuccess({ user, additionalData: { displayName } }))\r\n    } catch(error) {\r\n        yield put(signUpFailure(error))\r\n    }\r\n}\r\n\r\nexport function* signInAfterSignUp({payload: { user, additionalData }}) {\r\n    yield getSnapshotFromUserAuth(user, additionalData);\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated )\r\n}\r\n\r\nexport function* onSignOutStart() {\r\n    yield takeLatest(userActionTypes.SIGN_OUT_START, signOut)\r\n}\r\n\r\nexport function* onSignUpSuccess() {\r\n    yield takeLatest(userActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp)\r\n}\r\n\r\nexport function* onSignUpStart() {\r\n    yield takeLatest(userActionTypes.SIGN_UP_START, signUp)\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart),call(onSignUpStart), call(onSignUpSuccess)])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}